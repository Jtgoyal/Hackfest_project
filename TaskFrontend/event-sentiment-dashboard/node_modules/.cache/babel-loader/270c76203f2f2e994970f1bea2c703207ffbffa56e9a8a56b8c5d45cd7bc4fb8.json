{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\chhat\\\\supersonicsteam\\\\TaskFrontend\\\\event-sentiment-dashboard\\\\src\\\\components\\\\SentimentAnalytics.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { Box, Typography, Paper, Grid, FormControl, Select, MenuItem, ToggleButtonGroup, ToggleButton, CircularProgress } from '@mui/material';\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, BarElement, Title, Tooltip, Legend, Filler, TimeScale } from 'chart.js';\nimport { Line, Bar } from 'react-chartjs-2';\nimport 'chartjs-adapter-date-fns';\n\n// Register the required Chart.js components\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, BarElement, Title, Tooltip, Legend, Filler, TimeScale);\n\n// Define chart animation settings\nconst chartAnimationOptions = {\n  animations: {\n    tension: {\n      duration: 1000,\n      easing: 'linear',\n      from: 0.3,\n      to: 0.4,\n      loop: false\n    }\n  },\n  transitions: {\n    active: {\n      animation: {\n        duration: 400\n      }\n    }\n  }\n};\n\n// Generate hours for x-axis\nconst generateHourLabels = () => {\n  const now = new Date();\n  const hours = [];\n  for (let i = 7; i >= 0; i--) {\n    const hourAgo = new Date(now);\n    hourAgo.setHours(now.getHours() - i);\n    hours.push(hourAgo.toLocaleTimeString('en-US', {\n      hour: '2-digit',\n      minute: '2-digit'\n    }));\n  }\n  return hours;\n};\n\n// Generate mock sentiment data for hourly distribution\nconst generateHourlySentimentData = () => {\n  const hours = generateHourLabels();\n  return {\n    labels: hours,\n    datasets: [{\n      label: 'Positive',\n      data: hours.map(() => Math.floor(Math.random() * 40) + 30),\n      // 30-70\n      backgroundColor: 'rgba(76, 175, 80, 0.5)',\n      borderColor: 'rgb(76, 175, 80)',\n      borderWidth: 2,\n      tension: 0.4\n    }, {\n      label: 'Neutral',\n      data: hours.map(() => Math.floor(Math.random() * 30) + 15),\n      // 15-45\n      backgroundColor: 'rgba(255, 235, 59, 0.5)',\n      borderColor: 'rgb(255, 235, 59)',\n      borderWidth: 2,\n      tension: 0.4\n    }, {\n      label: 'Negative',\n      data: hours.map(() => Math.floor(Math.random() * 25) + 5),\n      // 5-30\n      backgroundColor: 'rgba(244, 67, 54, 0.5)',\n      borderColor: 'rgb(244, 67, 54)',\n      borderWidth: 2,\n      tension: 0.4\n    }]\n  };\n};\n\n// Generate mock data for channel comparison\nconst generateChannelComparisonData = () => {\n  return {\n    labels: ['Twitter', 'Instagram', 'In-app Chat', 'Q&A', 'Reviews'],\n    datasets: [{\n      label: 'Positive',\n      data: [65, 80, 55, 40, 60],\n      backgroundColor: 'rgba(76, 175, 80, 0.7)'\n    }, {\n      label: 'Neutral',\n      data: [25, 15, 30, 45, 30],\n      backgroundColor: 'rgba(255, 235, 59, 0.7)'\n    }, {\n      label: 'Negative',\n      data: [10, 5, 15, 15, 10],\n      backgroundColor: 'rgba(244, 67, 54, 0.7)'\n    }]\n  };\n};\n\n// Generate mock data for resolution time trend\nconst generateResolutionTimeTrend = () => {\n  const days = [];\n  const now = new Date();\n  for (let i = 6; i >= 0; i--) {\n    const dayAgo = new Date(now);\n    dayAgo.setDate(now.getDate() - i);\n    days.push(dayAgo.toLocaleDateString('en-US', {\n      weekday: 'short',\n      month: 'short',\n      day: 'numeric'\n    }));\n  }\n\n  // Generate resolution times with a slightly downward trend (improving over time)\n  // with some random fluctuation\n  let baseValue = Math.floor(Math.random() * 10) + 30; // Starting point between 30-40 minutes\n  const resolutionData = days.map(() => {\n    baseValue = Math.max(10, baseValue + (Math.random() > 0.7 ? 5 : -5)); // Trend downward with occasional spikes\n    return baseValue;\n  });\n  return {\n    labels: days,\n    datasets: [{\n      label: 'Resolution Time (minutes)',\n      data: resolutionData,\n      borderColor: 'rgb(63, 81, 181)',\n      backgroundColor: 'rgba(63, 81, 181, 0.1)',\n      borderWidth: 2,\n      fill: true,\n      tension: 0.4,\n      pointBackgroundColor: 'rgb(63, 81, 181)',\n      pointRadius: 4\n    }]\n  };\n};\nconst SentimentAnalytics = () => {\n  _s();\n  const [loading, setLoading] = useState(true);\n  const [hourlySentimentData, setHourlySentimentData] = useState(generateHourlySentimentData());\n  const [channelComparisonData, setChannelComparisonData] = useState(generateChannelComparisonData());\n  const [resolutionTimeData, setResolutionTimeData] = useState(generateResolutionTimeTrend());\n  const [timeRange, setTimeRange] = useState('today');\n  const [chartView, setChartView] = useState('line');\n  const refreshTimerRef = useRef(null);\n  const lastUpdatedRef = useRef(new Date());\n\n  // Options for hourly sentiment chart\n  const hourlySentimentOptions = {\n    responsive: true,\n    maintainAspectRatio: false,\n    ...chartAnimationOptions,\n    scales: {\n      x: {\n        title: {\n          display: true,\n          text: 'Time'\n        },\n        grid: {\n          display: false\n        }\n      },\n      y: {\n        stacked: chartView === 'stacked',\n        title: {\n          display: true,\n          text: 'Number of Feedback Items'\n        },\n        beginAtZero: true\n      }\n    },\n    plugins: {\n      legend: {\n        position: 'top'\n      },\n      title: {\n        display: true,\n        text: 'Hourly Sentiment Distribution',\n        font: {\n          size: 16\n        }\n      },\n      tooltip: {\n        callbacks: {\n          label: function (context) {\n            let label = context.dataset.label || '';\n            if (label) {\n              label += ': ';\n            }\n            if (context.parsed.y !== null) {\n              label += context.parsed.y + ' items';\n            }\n            return label;\n          }\n        }\n      }\n    }\n  };\n\n  // Options for channel comparison chart\n  const channelComparisonOptions = {\n    responsive: true,\n    maintainAspectRatio: false,\n    ...chartAnimationOptions,\n    scales: {\n      x: {\n        title: {\n          display: true,\n          text: 'Feedback Channels'\n        },\n        grid: {\n          display: false\n        }\n      },\n      y: {\n        stacked: true,\n        title: {\n          display: true,\n          text: 'Percentage of Feedback'\n        },\n        min: 0,\n        max: 100\n      }\n    },\n    plugins: {\n      legend: {\n        position: 'top'\n      },\n      title: {\n        display: true,\n        text: 'Sentiment Comparison Across Channels',\n        font: {\n          size: 16\n        }\n      },\n      tooltip: {\n        callbacks: {\n          label: function (context) {\n            let label = context.dataset.label || '';\n            if (label) {\n              label += ': ';\n            }\n            if (context.parsed.y !== null) {\n              label += context.parsed.y + '%';\n            }\n            return label;\n          }\n        }\n      }\n    }\n  };\n\n  // Options for resolution time trend chart\n  const resolutionTimeOptions = {\n    responsive: true,\n    maintainAspectRatio: false,\n    ...chartAnimationOptions,\n    scales: {\n      x: {\n        title: {\n          display: true,\n          text: 'Date'\n        },\n        grid: {\n          display: false\n        }\n      },\n      y: {\n        title: {\n          display: true,\n          text: 'Average Resolution Time (minutes)'\n        },\n        min: 0,\n        suggestedMax: 60\n      }\n    },\n    plugins: {\n      legend: {\n        position: 'top'\n      },\n      title: {\n        display: true,\n        text: 'Complaint Resolution Time Trend',\n        font: {\n          size: 16\n        }\n      }\n    }\n  };\n\n  // Handle time range change\n  const handleTimeRangeChange = event => {\n    setTimeRange(event.target.value);\n    refreshChartData(true);\n  };\n\n  // Handle chart view type change\n  const handleChartViewChange = (event, newView) => {\n    if (newView !== null) {\n      setChartView(newView);\n    }\n  };\n\n  // Refresh chart data\n  const refreshChartData = (forceRefresh = false) => {\n    // Only refresh if forced or if 30 seconds have passed\n    const now = new Date();\n    const timeDiff = now.getTime() - lastUpdatedRef.current.getTime();\n    if (forceRefresh || timeDiff >= 30000) {\n      setLoading(true);\n      setTimeout(() => {\n        setHourlySentimentData(generateHourlySentimentData());\n        setChannelComparisonData(generateChannelComparisonData());\n        setResolutionTimeData(generateResolutionTimeTrend());\n        setLoading(false);\n        lastUpdatedRef.current = new Date();\n      }, 500);\n    }\n  };\n\n  // Initialize data and set up auto-refresh\n  useEffect(() => {\n    // Initial data load\n    setLoading(true);\n    setTimeout(() => {\n      setHourlySentimentData(generateHourlySentimentData());\n      setChannelComparisonData(generateChannelComparisonData());\n      setResolutionTimeData(generateResolutionTimeTrend());\n      setLoading(false);\n      lastUpdatedRef.current = new Date();\n    }, 1000);\n\n    // Set up auto-refresh timer\n    refreshTimerRef.current = setInterval(() => {\n      refreshChartData();\n    }, 30000); // Refresh every 30 seconds\n\n    return () => {\n      if (refreshTimerRef.current) {\n        clearInterval(refreshTimerRef.current);\n      }\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(Box, {\n    sx: {\n      mb: 4\n    },\n    children: [/*#__PURE__*/_jsxDEV(Box, {\n      display: \"flex\",\n      justifyContent: \"space-between\",\n      alignItems: \"center\",\n      mb: 2,\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h5\",\n        component: \"h2\",\n        gutterBottom: true,\n        children: \"Sentiment Analytics\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 391,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        display: \"flex\",\n        alignItems: \"center\",\n        gap: 2,\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"body2\",\n          color: \"text.secondary\",\n          children: [\"Last updated: \", lastUpdatedRef.current.toLocaleTimeString()]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 396,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n          size: \"small\",\n          sx: {\n            minWidth: 120\n          },\n          children: /*#__PURE__*/_jsxDEV(Select, {\n            value: timeRange,\n            onChange: handleTimeRangeChange,\n            displayEmpty: true,\n            children: [/*#__PURE__*/_jsxDEV(MenuItem, {\n              value: \"today\",\n              children: \"Today\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 406,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(MenuItem, {\n              value: \"week\",\n              children: \"This Week\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 407,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(MenuItem, {\n              value: \"month\",\n              children: \"This Month\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 408,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 401,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 400,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 395,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 390,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      spacing: 3,\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        lg: 8,\n        children: /*#__PURE__*/_jsxDEV(Paper, {\n          elevation: 2,\n          sx: {\n            p: 2,\n            height: 400,\n            position: 'relative'\n          },\n          children: [/*#__PURE__*/_jsxDEV(Box, {\n            display: \"flex\",\n            justifyContent: \"space-between\",\n            alignItems: \"center\",\n            mb: 2,\n            children: [/*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"subtitle1\",\n              children: \"Hourly Sentiment Distribution\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 419,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(ToggleButtonGroup, {\n              size: \"small\",\n              value: chartView,\n              exclusive: true,\n              onChange: handleChartViewChange,\n              children: [/*#__PURE__*/_jsxDEV(ToggleButton, {\n                value: \"line\",\n                children: \"Line\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 426,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(ToggleButton, {\n                value: \"stacked\",\n                children: \"Stacked\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 427,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 420,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 418,\n            columnNumber: 13\n          }, this), loading ? /*#__PURE__*/_jsxDEV(Box, {\n            display: \"flex\",\n            justifyContent: \"center\",\n            alignItems: \"center\",\n            height: \"85%\",\n            children: /*#__PURE__*/_jsxDEV(CircularProgress, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 432,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 431,\n            columnNumber: 15\n          }, this) : /*#__PURE__*/_jsxDEV(Box, {\n            height: \"85%\",\n            children: chartView === 'line' ? /*#__PURE__*/_jsxDEV(Line, {\n              options: hourlySentimentOptions,\n              data: hourlySentimentData\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 437,\n              columnNumber: 19\n            }, this) : /*#__PURE__*/_jsxDEV(Bar, {\n              options: hourlySentimentOptions,\n              data: hourlySentimentData\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 439,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 435,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 417,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 416,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        md: 6,\n        lg: 4,\n        children: /*#__PURE__*/_jsxDEV(Paper, {\n          elevation: 2,\n          sx: {\n            p: 2,\n            height: 400,\n            position: 'relative'\n          },\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"subtitle1\",\n            gutterBottom: true,\n            children: \"Sentiment by Channel\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 449,\n            columnNumber: 13\n          }, this), loading ? /*#__PURE__*/_jsxDEV(Box, {\n            display: \"flex\",\n            justifyContent: \"center\",\n            alignItems: \"center\",\n            height: \"85%\",\n            children: /*#__PURE__*/_jsxDEV(CircularProgress, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 454,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 453,\n            columnNumber: 15\n          }, this) : /*#__PURE__*/_jsxDEV(Box, {\n            height: \"85%\",\n            children: /*#__PURE__*/_jsxDEV(Bar, {\n              options: channelComparisonOptions,\n              data: channelComparisonData\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 458,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 457,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 448,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 447,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        children: /*#__PURE__*/_jsxDEV(Paper, {\n          elevation: 2,\n          sx: {\n            p: 2,\n            height: 350,\n            position: 'relative'\n          },\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"subtitle1\",\n            gutterBottom: true,\n            children: \"Complaint Resolution Time Trend\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 467,\n            columnNumber: 13\n          }, this), loading ? /*#__PURE__*/_jsxDEV(Box, {\n            display: \"flex\",\n            justifyContent: \"center\",\n            alignItems: \"center\",\n            height: \"85%\",\n            children: /*#__PURE__*/_jsxDEV(CircularProgress, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 472,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 471,\n            columnNumber: 15\n          }, this) : /*#__PURE__*/_jsxDEV(Box, {\n            height: \"85%\",\n            children: /*#__PURE__*/_jsxDEV(Line, {\n              options: resolutionTimeOptions,\n              data: resolutionTimeData\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 476,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 475,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 466,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 465,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 414,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 389,\n    columnNumber: 5\n  }, this);\n};\n_s(SentimentAnalytics, \"3W98kqRyGioNyZfuSuilAP5+guE=\");\n_c = SentimentAnalytics;\nexport default SentimentAnalytics;\nvar _c;\n$RefreshReg$(_c, \"SentimentAnalytics\");","map":{"version":3,"names":["React","useState","useEffect","useRef","Box","Typography","Paper","Grid","FormControl","Select","MenuItem","ToggleButtonGroup","ToggleButton","CircularProgress","Chart","ChartJS","CategoryScale","LinearScale","PointElement","LineElement","BarElement","Title","Tooltip","Legend","Filler","TimeScale","Line","Bar","jsxDEV","_jsxDEV","register","chartAnimationOptions","animations","tension","duration","easing","from","to","loop","transitions","active","animation","generateHourLabels","now","Date","hours","i","hourAgo","setHours","getHours","push","toLocaleTimeString","hour","minute","generateHourlySentimentData","labels","datasets","label","data","map","Math","floor","random","backgroundColor","borderColor","borderWidth","generateChannelComparisonData","generateResolutionTimeTrend","days","dayAgo","setDate","getDate","toLocaleDateString","weekday","month","day","baseValue","resolutionData","max","fill","pointBackgroundColor","pointRadius","SentimentAnalytics","_s","loading","setLoading","hourlySentimentData","setHourlySentimentData","channelComparisonData","setChannelComparisonData","resolutionTimeData","setResolutionTimeData","timeRange","setTimeRange","chartView","setChartView","refreshTimerRef","lastUpdatedRef","hourlySentimentOptions","responsive","maintainAspectRatio","scales","x","title","display","text","grid","y","stacked","beginAtZero","plugins","legend","position","font","size","tooltip","callbacks","context","dataset","parsed","channelComparisonOptions","min","resolutionTimeOptions","suggestedMax","handleTimeRangeChange","event","target","value","refreshChartData","handleChartViewChange","newView","forceRefresh","timeDiff","getTime","current","setTimeout","setInterval","clearInterval","sx","mb","children","justifyContent","alignItems","variant","component","gutterBottom","fileName","_jsxFileName","lineNumber","columnNumber","gap","color","minWidth","onChange","displayEmpty","container","spacing","item","xs","lg","elevation","p","height","exclusive","options","md","_c","$RefreshReg$"],"sources":["C:/Users/chhat/supersonicsteam/TaskFrontend/event-sentiment-dashboard/src/components/SentimentAnalytics.tsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport { \r\n  Box, \r\n  Typography, \r\n  Paper, \r\n  Grid, \r\n  Divider, \r\n  FormControl, \r\n  Select, \r\n  MenuItem,\r\n  SelectChangeEvent,\r\n  ToggleButtonGroup,\r\n  ToggleButton,\r\n  CircularProgress\r\n} from '@mui/material';\r\nimport {\r\n  Chart as ChartJS,\r\n  CategoryScale,\r\n  LinearScale,\r\n  PointElement,\r\n  LineElement,\r\n  BarElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend,\r\n  Filler,\r\n  TimeScale,\r\n} from 'chart.js';\r\nimport { Line, Bar } from 'react-chartjs-2';\r\nimport 'chartjs-adapter-date-fns';\r\n\r\n// Register the required Chart.js components\r\nChartJS.register(\r\n  CategoryScale,\r\n  LinearScale,\r\n  PointElement,\r\n  LineElement,\r\n  BarElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend,\r\n  Filler,\r\n  TimeScale\r\n);\r\n\r\n// Define chart animation settings\r\nconst chartAnimationOptions = {\r\n  animations: {\r\n    tension: {\r\n      duration: 1000,\r\n      easing: 'linear',\r\n      from: 0.3,\r\n      to: 0.4,\r\n      loop: false\r\n    }\r\n  },\r\n  transitions: {\r\n    active: {\r\n      animation: {\r\n        duration: 400\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\n// Generate hours for x-axis\r\nconst generateHourLabels = () => {\r\n  const now = new Date();\r\n  const hours = [];\r\n  \r\n  for (let i = 7; i >= 0; i--) {\r\n    const hourAgo = new Date(now);\r\n    hourAgo.setHours(now.getHours() - i);\r\n    hours.push(hourAgo.toLocaleTimeString('en-US', { hour: '2-digit', minute: '2-digit' }));\r\n  }\r\n  \r\n  return hours;\r\n};\r\n\r\n// Generate mock sentiment data for hourly distribution\r\nconst generateHourlySentimentData = () => {\r\n  const hours = generateHourLabels();\r\n  \r\n  return {\r\n    labels: hours,\r\n    datasets: [\r\n      {\r\n        label: 'Positive',\r\n        data: hours.map(() => Math.floor(Math.random() * 40) + 30), // 30-70\r\n        backgroundColor: 'rgba(76, 175, 80, 0.5)',\r\n        borderColor: 'rgb(76, 175, 80)',\r\n        borderWidth: 2,\r\n        tension: 0.4,\r\n      },\r\n      {\r\n        label: 'Neutral',\r\n        data: hours.map(() => Math.floor(Math.random() * 30) + 15), // 15-45\r\n        backgroundColor: 'rgba(255, 235, 59, 0.5)',\r\n        borderColor: 'rgb(255, 235, 59)',\r\n        borderWidth: 2,\r\n        tension: 0.4,\r\n      },\r\n      {\r\n        label: 'Negative',\r\n        data: hours.map(() => Math.floor(Math.random() * 25) + 5), // 5-30\r\n        backgroundColor: 'rgba(244, 67, 54, 0.5)',\r\n        borderColor: 'rgb(244, 67, 54)',\r\n        borderWidth: 2,\r\n        tension: 0.4,\r\n      }\r\n    ]\r\n  };\r\n};\r\n\r\n// Generate mock data for channel comparison\r\nconst generateChannelComparisonData = () => {\r\n  return {\r\n    labels: ['Twitter', 'Instagram', 'In-app Chat', 'Q&A', 'Reviews'],\r\n    datasets: [\r\n      {\r\n        label: 'Positive',\r\n        data: [65, 80, 55, 40, 60],\r\n        backgroundColor: 'rgba(76, 175, 80, 0.7)'\r\n      },\r\n      {\r\n        label: 'Neutral',\r\n        data: [25, 15, 30, 45, 30],\r\n        backgroundColor: 'rgba(255, 235, 59, 0.7)'\r\n      },\r\n      {\r\n        label: 'Negative',\r\n        data: [10, 5, 15, 15, 10],\r\n        backgroundColor: 'rgba(244, 67, 54, 0.7)'\r\n      }\r\n    ]\r\n  };\r\n};\r\n\r\n// Generate mock data for resolution time trend\r\nconst generateResolutionTimeTrend = () => {\r\n  const days = [];\r\n  const now = new Date();\r\n  \r\n  for (let i = 6; i >= 0; i--) {\r\n    const dayAgo = new Date(now);\r\n    dayAgo.setDate(now.getDate() - i);\r\n    days.push(dayAgo.toLocaleDateString('en-US', { weekday: 'short', month: 'short', day: 'numeric' }));\r\n  }\r\n  \r\n  // Generate resolution times with a slightly downward trend (improving over time)\r\n  // with some random fluctuation\r\n  let baseValue = Math.floor(Math.random() * 10) + 30; // Starting point between 30-40 minutes\r\n  const resolutionData = days.map(() => {\r\n    baseValue = Math.max(10, baseValue + (Math.random() > 0.7 ? 5 : -5)); // Trend downward with occasional spikes\r\n    return baseValue;\r\n  });\r\n  \r\n  return {\r\n    labels: days,\r\n    datasets: [\r\n      {\r\n        label: 'Resolution Time (minutes)',\r\n        data: resolutionData,\r\n        borderColor: 'rgb(63, 81, 181)',\r\n        backgroundColor: 'rgba(63, 81, 181, 0.1)',\r\n        borderWidth: 2,\r\n        fill: true,\r\n        tension: 0.4,\r\n        pointBackgroundColor: 'rgb(63, 81, 181)',\r\n        pointRadius: 4\r\n      }\r\n    ]\r\n  };\r\n};\r\n\r\nconst SentimentAnalytics: React.FC = () => {\r\n  const [loading, setLoading] = useState(true);\r\n  const [hourlySentimentData, setHourlySentimentData] = useState(generateHourlySentimentData());\r\n  const [channelComparisonData, setChannelComparisonData] = useState(generateChannelComparisonData());\r\n  const [resolutionTimeData, setResolutionTimeData] = useState(generateResolutionTimeTrend());\r\n  const [timeRange, setTimeRange] = useState('today');\r\n  const [chartView, setChartView] = useState('line');\r\n  const refreshTimerRef = useRef<NodeJS.Timeout | null>(null);\r\n  const lastUpdatedRef = useRef<Date>(new Date());\r\n  \r\n  // Options for hourly sentiment chart\r\n  const hourlySentimentOptions = {\r\n    responsive: true,\r\n    maintainAspectRatio: false,\r\n    ...chartAnimationOptions,\r\n    scales: {\r\n      x: {\r\n        title: {\r\n          display: true,\r\n          text: 'Time'\r\n        },\r\n        grid: {\r\n          display: false\r\n        }\r\n      },\r\n      y: {\r\n        stacked: chartView === 'stacked',\r\n        title: {\r\n          display: true,\r\n          text: 'Number of Feedback Items'\r\n        },\r\n        beginAtZero: true\r\n      }\r\n    },\r\n    plugins: {\r\n      legend: {\r\n        position: 'top' as const,\r\n      },\r\n      title: {\r\n        display: true,\r\n        text: 'Hourly Sentiment Distribution',\r\n        font: {\r\n          size: 16\r\n        }\r\n      },\r\n      tooltip: {\r\n        callbacks: {\r\n          label: function(context: any) {\r\n            let label = context.dataset.label || '';\r\n            if (label) {\r\n              label += ': ';\r\n            }\r\n            if (context.parsed.y !== null) {\r\n              label += context.parsed.y + ' items';\r\n            }\r\n            return label;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  };\r\n  \r\n  // Options for channel comparison chart\r\n  const channelComparisonOptions = {\r\n    responsive: true,\r\n    maintainAspectRatio: false,\r\n    ...chartAnimationOptions,\r\n    scales: {\r\n      x: {\r\n        title: {\r\n          display: true,\r\n          text: 'Feedback Channels'\r\n        },\r\n        grid: {\r\n          display: false\r\n        }\r\n      },\r\n      y: {\r\n        stacked: true,\r\n        title: {\r\n          display: true,\r\n          text: 'Percentage of Feedback'\r\n        },\r\n        min: 0,\r\n        max: 100\r\n      }\r\n    },\r\n    plugins: {\r\n      legend: {\r\n        position: 'top' as const,\r\n      },\r\n      title: {\r\n        display: true,\r\n        text: 'Sentiment Comparison Across Channels',\r\n        font: {\r\n          size: 16\r\n        }\r\n      },\r\n      tooltip: {\r\n        callbacks: {\r\n          label: function(context: any) {\r\n            let label = context.dataset.label || '';\r\n            if (label) {\r\n              label += ': ';\r\n            }\r\n            if (context.parsed.y !== null) {\r\n              label += context.parsed.y + '%';\r\n            }\r\n            return label;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  };\r\n  \r\n  // Options for resolution time trend chart\r\n  const resolutionTimeOptions = {\r\n    responsive: true,\r\n    maintainAspectRatio: false,\r\n    ...chartAnimationOptions,\r\n    scales: {\r\n      x: {\r\n        title: {\r\n          display: true,\r\n          text: 'Date'\r\n        },\r\n        grid: {\r\n          display: false\r\n        }\r\n      },\r\n      y: {\r\n        title: {\r\n          display: true,\r\n          text: 'Average Resolution Time (minutes)'\r\n        },\r\n        min: 0,\r\n        suggestedMax: 60\r\n      }\r\n    },\r\n    plugins: {\r\n      legend: {\r\n        position: 'top' as const,\r\n      },\r\n      title: {\r\n        display: true,\r\n        text: 'Complaint Resolution Time Trend',\r\n        font: {\r\n          size: 16\r\n        }\r\n      }\r\n    }\r\n  };\r\n  \r\n  // Handle time range change\r\n  const handleTimeRangeChange = (event: SelectChangeEvent) => {\r\n    setTimeRange(event.target.value);\r\n    refreshChartData(true);\r\n  };\r\n  \r\n  // Handle chart view type change\r\n  const handleChartViewChange = (\r\n    event: React.MouseEvent<HTMLElement>,\r\n    newView: string,\r\n  ) => {\r\n    if (newView !== null) {\r\n      setChartView(newView);\r\n    }\r\n  };\r\n  \r\n  // Refresh chart data\r\n  const refreshChartData = (forceRefresh = false) => {\r\n    // Only refresh if forced or if 30 seconds have passed\r\n    const now = new Date();\r\n    const timeDiff = now.getTime() - lastUpdatedRef.current.getTime();\r\n    \r\n    if (forceRefresh || timeDiff >= 30000) {\r\n      setLoading(true);\r\n      \r\n      setTimeout(() => {\r\n        setHourlySentimentData(generateHourlySentimentData());\r\n        setChannelComparisonData(generateChannelComparisonData());\r\n        setResolutionTimeData(generateResolutionTimeTrend());\r\n        setLoading(false);\r\n        lastUpdatedRef.current = new Date();\r\n      }, 500);\r\n    }\r\n  };\r\n  \r\n  // Initialize data and set up auto-refresh\r\n  useEffect(() => {\r\n    // Initial data load\r\n    setLoading(true);\r\n    setTimeout(() => {\r\n      setHourlySentimentData(generateHourlySentimentData());\r\n      setChannelComparisonData(generateChannelComparisonData());\r\n      setResolutionTimeData(generateResolutionTimeTrend());\r\n      setLoading(false);\r\n      lastUpdatedRef.current = new Date();\r\n    }, 1000);\r\n    \r\n    // Set up auto-refresh timer\r\n    refreshTimerRef.current = setInterval(() => {\r\n      refreshChartData();\r\n    }, 30000); // Refresh every 30 seconds\r\n    \r\n    return () => {\r\n      if (refreshTimerRef.current) {\r\n        clearInterval(refreshTimerRef.current);\r\n      }\r\n    };\r\n  }, []);\r\n  \r\n  return (\r\n    <Box sx={{ mb: 4 }}>\r\n      <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\" mb={2}>\r\n        <Typography variant=\"h5\" component=\"h2\" gutterBottom>\r\n          Sentiment Analytics\r\n        </Typography>\r\n        \r\n        <Box display=\"flex\" alignItems=\"center\" gap={2}>\r\n          <Typography variant=\"body2\" color=\"text.secondary\">\r\n            Last updated: {lastUpdatedRef.current.toLocaleTimeString()}\r\n          </Typography>\r\n          \r\n          <FormControl size=\"small\" sx={{ minWidth: 120 }}>\r\n            <Select\r\n              value={timeRange}\r\n              onChange={handleTimeRangeChange}\r\n              displayEmpty\r\n            >\r\n              <MenuItem value=\"today\">Today</MenuItem>\r\n              <MenuItem value=\"week\">This Week</MenuItem>\r\n              <MenuItem value=\"month\">This Month</MenuItem>\r\n            </Select>\r\n          </FormControl>\r\n        </Box>\r\n      </Box>\r\n      \r\n      <Grid container spacing={3}>\r\n        {/* Hourly Sentiment Chart */}\r\n        <Grid item xs={12} lg={8}>\r\n          <Paper elevation={2} sx={{ p: 2, height: 400, position: 'relative' }}>\r\n            <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\" mb={2}>\r\n              <Typography variant=\"subtitle1\">Hourly Sentiment Distribution</Typography>\r\n              <ToggleButtonGroup\r\n                size=\"small\"\r\n                value={chartView}\r\n                exclusive\r\n                onChange={handleChartViewChange}\r\n              >\r\n                <ToggleButton value=\"line\">Line</ToggleButton>\r\n                <ToggleButton value=\"stacked\">Stacked</ToggleButton>\r\n              </ToggleButtonGroup>\r\n            </Box>\r\n            {loading ? (\r\n              <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" height=\"85%\">\r\n                <CircularProgress />\r\n              </Box>\r\n            ) : (\r\n              <Box height=\"85%\">\r\n                {chartView === 'line' ? (\r\n                  <Line options={hourlySentimentOptions} data={hourlySentimentData} />\r\n                ) : (\r\n                  <Bar options={hourlySentimentOptions} data={hourlySentimentData} />\r\n                )}\r\n              </Box>\r\n            )}\r\n          </Paper>\r\n        </Grid>\r\n        \r\n        {/* Channel Comparison Chart */}\r\n        <Grid item xs={12} md={6} lg={4}>\r\n          <Paper elevation={2} sx={{ p: 2, height: 400, position: 'relative' }}>\r\n            <Typography variant=\"subtitle1\" gutterBottom>\r\n              Sentiment by Channel\r\n            </Typography>\r\n            {loading ? (\r\n              <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" height=\"85%\">\r\n                <CircularProgress />\r\n              </Box>\r\n            ) : (\r\n              <Box height=\"85%\">\r\n                <Bar options={channelComparisonOptions} data={channelComparisonData} />\r\n              </Box>\r\n            )}\r\n          </Paper>\r\n        </Grid>\r\n        \r\n        {/* Resolution Time Trend */}\r\n        <Grid item xs={12}>\r\n          <Paper elevation={2} sx={{ p: 2, height: 350, position: 'relative' }}>\r\n            <Typography variant=\"subtitle1\" gutterBottom>\r\n              Complaint Resolution Time Trend\r\n            </Typography>\r\n            {loading ? (\r\n              <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" height=\"85%\">\r\n                <CircularProgress />\r\n              </Box>\r\n            ) : (\r\n              <Box height=\"85%\">\r\n                <Line options={resolutionTimeOptions} data={resolutionTimeData} />\r\n              </Box>\r\n            )}\r\n          </Paper>\r\n        </Grid>\r\n      </Grid>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default SentimentAnalytics; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}